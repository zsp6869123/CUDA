#### 纹理内存

##### 1. 概述

​	纹理存储器中的数据以一维、二维或者三维数组的形式存储在显存中，可以通过缓存加速访问，并且可以声明大小比常数存储器要大的多。

　　在kernel中访问纹理存储器的操作称为纹理拾取(texture fetching)。将显存中的数据与纹理参照系关联的操作，称为将数据与纹理绑定(texture binding).

　　显存中可以绑定到纹理的数据有两种，分别是普通的线性存储器和cuda数组。

> __线性存储器只能与一维或二维纹理绑定,采用整型纹理拾取坐标，坐标值与数据在存储器中的位置相同；__
>
> __CUDA数组可以与一维、二维、三维纹理绑定，纹理拾取坐标为归一化或者非归一化的浮点型，并且支持许多特殊功能。__
| 与纹理绑定的数据结构 | 拾取坐标 |   滤波模式   | 归一化坐标 | 类型转换 | 多维纹理 |
| :--------: | :--: | :------: | :---: | ---- | :--: |
|   CUDA数组   | 浮点型  | 对浮点型像元支持 |  支持   | 支持   |  支持  |
|    线性数组    |  整形  |   不支持    |  不支持  | 支持   | 不支持  |



##### 2.纹理缓存

* 纹理缓存中的数据可以被重复利用
* 纹理缓存一次预取拾取坐标对应位置附近的几个象元，可以实现滤波模式。


##### 3.使用

__(1)__  首先需要申明纹理内存，定义方式如下：

```c
texture<Type, Dim, ReadMode> texRef;
//Type指定数据类型，特别注意：不支持3元组
//Dim指定纹理参考系的维度，默认为1
//ReadMode可以是cudaReadModelNormalizedFloat或cudaReadModelElementType(默认)
```

__注. 纹理内存和全局变量一样，必须定义在所有函数体之外。__

__(2)__  接下来需要将纹理内存和数组进行绑定，使用__cudaBindTexture()__ 或__cudaBindTextureToArray()__进行：

* __一维纹理__绑定函数__cudaBindTexture()__的定义：

```c
cudaError_t cudaBindTexture(    
	size_t *     offset,//一般为NULL
	const struct textureReference *     texref,//纹理内存
	const void *     devPtr,//待绑定数组
	const struct cudaChannelFormatDesc *     desc,//空间大小
	size_t     size = UINT_MAX     
) 
```

例如：

```c
#define DIM 512
texture<float> textRef;
void main(){
  	float* dev_array;
    CPUAnimBitmap IMG(DIM, DIM);
	HANDLE_ERROR(cudaMalloc(&dev_array, IMG.image_size()));
	HANDLE_ERROR(cudaBindTexture(NULL, textRef, dev_array,IMG.image_size()));
}
```

* __二维纹理__绑定函数__cudaBindTexture2D()__的定义：

```c
cudaError_t cudaBindTexture2D(    
  size_t *     offset,
  const struct textureReference *     texref,
  const void *     devPtr,
  const struct cudaChannelFormatDesc *     desc,
  size_t     width,
  size_t     height,
  size_t     pitch     
  )  
```

例如：

```C
#define DIM 512
texture<float,2> textRef;
void main(){
  	float* dev_array;
    CPUAnimBitmap IMG(DIM, DIM);
	HANDLE_ERROR(cudaMalloc(&dev_array, IMG.image_size()));
    cudaChannelFormatDesc desc = cudaCreateChannelDesc<float>();
	HANDLE_ERROR(cudaBindTexture2D(NULL, texRef, dev_array, desc, DIM, DIM, sizeof(float)*DIM));
}
```

* CUDA数组绑定函数__cudaBindTextureToArray()__的定义
```CQL
cudaError_t cudaBindTextureToArray(    
    const struct textureReference *     texref,
    const struct cudaArray *     array,
    const struct cudaChannelFormatDesc *     desc     
)
```
例如：

```c
cudaBindTextureToArray(texRef, cuArray);
```

​	纹理内存的使用和全局变量有些不太一样。对于线性存储器绑定的纹理，使用__tex1Dfetch()__访问，采用的纹理坐标是整型。由cudaMallocPitch() 或者 cudaMalloc3D()分配的线性空间实际上仍然是经过填充、对齐的一维线性空间，因此也用tex1Dfetch()。多维可用tex2D() 和 tex3D()访问。例如：

```c
float val1,val2;
val1 = tex1Dfetch(textRef,offset);
val2 = tex2D(textRef2D,x,y);
```

​	对与一维、二维、三维cuda数组绑定的纹理，分别使用tex1D(), tex2D() 和 tex3D()函数访问，并且使用浮点型纹理坐标。

```c
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include "./common/book.h"
#include <stdio.h>
#include <math.h>

// 2D float texture
texture<float, 2, cudaReadModeElementType> texRef;
// Simple transformation kernel
__global__ void transformKernel(float* output, int width, int height, float theta){
	// 根据tid bid计算归一化的拾取坐标
	unsigned int x = blockIdx.x * blockDim.x + threadIdx.x;
	unsigned int y = blockIdx.y * blockDim.y + threadIdx.y;
	float u = x / (float)width;
	float v = y / (float)height;
	// 旋转拾取坐标
	u -= 0.5f;
	v -= 0.5f;
	float tu = u * cosf(theta) - v * sinf(theta) + 0.5f;
	float tv = v * cosf(theta) + u * sinf(theta) + 0.5f;
	//从纹理存储器中拾取数据，并写入显存
	output[y * width + x] = tex2D(texRef, tu, tv);
}

// Host code
int main()
{
	float angle = 1.0f;
	const int width = 256, height = 256;
	float h_data[height][width] = { 0 };
	float size = height*width*sizeof(float);
	// 分配CUDA数组
	cudaChannelFormatDesc channelDesc = cudaCreateChannelDesc(32, 0, 0, 0, cudaChannelFormatKindFloat);
	cudaArray* cuArray;
	cudaMallocArray(&cuArray, &channelDesc, width, height);
	// Copy to device memory some data located at address h_data
	// in host memory
	cudaMemcpyToArray(cuArray, 0, 0, h_data, size, cudaMemcpyHostToDevice);
	// Set texture parameters
	texRef.addressMode[0] = cudaAddressModeWrap; //循环寻址方式
	texRef.addressMode[1] = cudaAddressModeWrap;
	texRef.filterMode = cudaFilterModeLinear;   //线性滤波，因为这里是一个图像。如果要保持原来的值则千万不要用线性滤波
	texRef.normalized = true; //归一化坐标
	// Bind the array to the texture
	cudaBindTextureToArray(texRef, cuArray, channelDesc);
	// Allocate result of transformation in device memory
	float* output;
	cudaMalloc((void**)&output, width * height * sizeof(float));
	// Invoke kernel
	dim3 dimBlock(16, 16);
	dim3 dimGrid((width + dimBlock.x - 1) / dimBlock.x, (height + dimBlock.y - 1) / dimBlock.y);
	transformKernel << <dimGrid, dimBlock >> >(output, width, height, angle);
	// Free device memory
	cudaFreeArray(cuArray);
	cudaFree(output);
}
```
__(3)__ 最后是取消对纹理的绑定，__cudaUnbindTexture()__:

```c
HANDLE_ERROR(cudaUnbindTexture(textIn));
```
